#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

declare object CyclicQuotient : ToricVariety;

object CyclicQuotient {

   property N : Integer;

   property Q : Integer;
    
   property CONTINUED_FRACTION : Vector<Integer>;
   
   property DUAL_CONTINUED_FRACTION : Vector<Integer>;

   property VERSAL_COMPONENTS : Matrix;

   # Computing the continued fractions corresponding to the components
   # of the versal base space according to the description given in
   # Stevens - On the Components[...].
   rule VERSAL_COMPONENTS : DUAL_CONTINUED_FRACTION {
      my $dcf = $this->DUAL_CONTINUED_FRACTION;
      $dcf = new Vector<Rational>($dcf);
      my $ineq = ($dcf | -unit_matrix($dcf->dim));
      $ineq = $ineq/(-ones_vector($dcf->dim) | unit_matrix($dcf->dim));
      # print $ineq;
      my $p = new Polytope(INEQUALITIES=>$ineq);
      my $candidates = $p->LATTICE_POINTS->minor(All, ~[0]);
      my @result = grep{
         my $v = christophersen_alpha($_);
         my @v= @$v;
         (pop @v) == 0
      }@{$candidates};
      # print @result;
      $this->VERSAL_COMPONENTS = new Matrix(@result);
   }

   rule N, Q : DUAL_CONTINUED_FRACTION {
      my $check = cf2rational($this->DUAL_CONTINUED_FRACTION);
      $this->N = new Integer(numerator($check));
      $this->Q = new Integer(numerator($check) - denominator($check));
   }

   rule DUAL_CONTINUED_FRACTION : N, Q {
      my $check = new Rational($this->N, ($this->N)-($this->Q));
      $this->DUAL_CONTINUED_FRACTION = rational2cf($check);
   }

   rule RAYS : N, Q {
      $this->RAYS = new Matrix([1,0],[-$this->Q, $this->N]);
   }

   rule MAXIMAL_CONES : {
      $this->MAXIMAL_CONES = [[0, 1]];
   }

   rule CONTINUED_FRACTION : N, Q {
      my $check = new Rational($this->N, $this->Q);
      # print $check."\n";
      $this->CONTINUED_FRACTION = rational2cf($check);
   }

   rule N, Q : CONTINUED_FRACTION {
      my $check = cf2rational($this->CONTINUED_FRACTION);
      $this->N = new Integer(numerator($check));
      $this->Q = new Integer(denominator($check));
   }
}

user_function christophersen_alpha(Vector<Integer>) {
   my($v) = @_;
   my @chain = @$v;
   my @result = ();
   my $a0 = 0;
   my $a1 = 1;
   my $a2 = 0;
   my $s = @chain;
   while($s > 0){
      $a2 = (pop @chain)*$a1 - $a0;
      push @result, $a0;
      $a0 = $a1;
      $a1 = $a2;
      $s = @chain;
   }
   push @result, $a0;
   push @result, $a1;
   return new Vector(@result);
}

user_function rational2cf(Rational){
   my($check) = @_;
   my @result = ();
   while($check != 0){
      push @result, new Integer(ceil($check));
      $check = ceil($check)- $check;
      $check = $check !=0 ? 1/$check : 0;
      # print $check."\n";
   }
   return new Vector(@result);
}

user_function cf2rational(Vector<Integer>){
   my($v) = @_;
   my @chain = @$v;
   my $check = new Rational(pop @chain);
   my $s = @chain;
   while($s > 0){
      $check = (new Rational(pop @chain)) - 1/$check;
      $s = @chain;
   }
   return $check;
}

