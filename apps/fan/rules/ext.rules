#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

object ToricVariety {

   user_method ext(TDivisor, TDivisor){
      my $tv = $_[0];
      my $D1 = $_[1];
      my $D2 = $_[2];
      print $D1->COEFFICIENTS," - ",$D2->COEFFICIENTS,"\n";
      my $c = new Cone(INPUT_RAYS=>$tv->RAYS);
      my $tvc = new Polytope(POINTS=>unit_vector($tv->AMBIENT_DIM+1,0)/(zero_vector($c->FACETS->rows)|$c->FACETS));
      print $tvc->VERTICES;
      my $D1gs = $D1->SECTION_POLYTOPE;
      my $D2gs = $D2->SECTION_POLYTOPE;
      print "Vertices:\n", $D1gs->VERTICES;
      print "Inequalities:\n",$D1gs->INEQUALITIES;
      print "Product:\n",$D1gs->INEQUALITIES * transpose($D1gs->VERTICES);
      my $v1 = move_inside($tvc,$D1gs);
      my $v2 = move_inside($tvc,$D2gs);
   }


}

# Return a vector that moves q into p.
# Note that we assume equality of the tail cones but do not check it.
sub move_inside{
   my ($p, $q) = @_;
   my $result = new Vector(zero_vector($q->AMBIENT_DIM+1));
   my $tail = $p->TAILCONE;
   my $qvert = $q->VERTICES;
   foreach my $facet (@{$p->FACETS}){
      my $val = 0;
      foreach my $q (@{$qvert}){
         my $test = $facet*$q;
         $val = $test<$val ? $test : $val;
      }
      if($val<0){
         foreach my $ray (@{$tail->RAYS}){
            if($facet*$ray>0){
               my $mult = ceil(-$val/($facet*$ray));
               $result += $mult*$ray;
               $qvert = new Matrix(map($_+$mult*$ray,@$qvert));
               last;
            }
         }
      }
   }
   return $result;
}
	
