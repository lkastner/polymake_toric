#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

CREDIT gfan

# path to gfan
custom $gfan_tropicalhypersurface;

custom $gfan_tropicalbruteforce;

CONFIGURE {
    find_program($gfan_tropicalhypersurface, "gfan_tropicalhypersurface");
    find_program($gfan_tropicalbruteforce, "gfan_tropicalbruteforce");
}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
user_function gfan_tropicalhypersurface(Polynomial) {
   my ($g) = @_;
   my $tempfile=new Tempfile;
   #my $tempfile="test";

   # Homogenizing polynomial and preparing to write to file:       
   my $R = $g->get_ring;

   # Writing data to file:
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input "Q[";
   print $input join(",",$R->variables);
   print $input "]{\n";
   print $input $g;
   print $input "\n}";
   print $tempfile;
   close $input;

   # print "$gfan_tropicalhypersurface\nlala\n$gfan_tropicalbruteforce\nlala\n";
   # Accessing gfan:
   system "$gfan_tropicalhypersurface --xml <$tempfile.in >$tempfile.poly 2>/dev/null";

   my $gfan_out= User::load("$tempfile.poly");
   # FIXME: This should be a symmetric fan, but Polymake
   # doesn't seem to parse this correctly. Hence we can't
   # read out the SYMMETRY_GROUP.
   #print $gfan_out->type->full_name,"\nSymmetryGroup:\n";
   #print $gfan_out->SYMMETRY_GROUP,"\nGens:\n";
   #print $gfan_out->SYMMETRY_GROUP_GENERATORS,"\n\n";
   return check_fan(-$gfan_out->RAYS, $gfan_out->MAXIMAL_CONES);
}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
user_function gfan_tropicalbruteforce(Ideal) {
   my ($I) = @_;
   my $tempfile=new Tempfile;
   #my $tempfile="test";

   my $R = $I->RING;

   # Writing data to file:
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input "Q[";
   print $input join(",",$R->variables);
   print $input "]{\n";
   print $input join(",",$I->GENERATORS);
   print $input "\n}";
   print $tempfile;
   close $input;

   # Accessing gfan:
   system "$gfan_tropicalbruteforce --xml <$tempfile.in >$tempfile.poly 2>/dev/null";

   my $gfan_out= User::load("$tempfile.poly");
   return $gfan_out;
}

