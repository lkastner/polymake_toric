CREDIT gfan

# path to gfan
custom $gfan_tropicalhypersurface;

custom $gfan_tropicalbruteforce;

CONFIGURE {
    find_program($gfan_tropicalhypersurface, "gfan_tropicalhypersurface");
    find_program($gfan_tropicalbruteforce, "gfan_tropicalbruteforce");
}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
user_function gfan_tropicalhypersurface(Polynomial) {
        my ($g) = @_;
        my $tempfile=new Tempfile;
        #my $tempfile="test";

        # Homogenizing polynomial and preparing to write to file:       
        my $R = $g->get_ring;

        # Writing data to file:
        open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
        print $input "Q[";
        print $input join(",",$R->variables);
        print $input "]{\n";
        print $input $g;
        print $input "\n}";
        print $tempfile;
        close $input;

        # print "$gfan_tropicalhypersurface\nlala\n$gfan_tropicalbruteforce\nlala\n";
        # Accessing gfan:
        system "$gfan_tropicalhypersurface --xml <$tempfile.in >$tempfile.poly 2>/dev/null";

        my $gfan_out= User::load("$tempfile.poly");
        return check_fan(-$gfan_out->RAYS, $gfan_out->MAXIMAL_CONES);
}

# This program preprocesses the input for gfan and then reads in the gfan output.
# It should be checked whether gfan_groebnerbla can really be left out.
user_function gfan_tropicalbruteforce(Matrix<Rational>, Matrix<Int>) {
        my ($coefficients, $exponents) = @_;
        my $tempfile=new Tempfile;
        #my $tempfile="test";

        # Homogenizing polynomial and preparing to write to file:       
        my $nvars = $exponents->cols();
        my @vars = ( "t" , map { "x$_" } (1..$nvars) );
        my $one = ones_vector<Int>($nvars);
        my $degrees = $exponents*$one;
        my $homog = new Matrix<Int>[[map{maximum($degrees)-$degrees->[$_]} (0..($exponents->rows()-1))]];
        print $homog;
        my $newexp = transpose($homog)|$exponents;
        my $R = new Ring(@vars);
        my $p = new Polynomial($newexp,$coefficients,$R);

        # Writing data to file:
        open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
        print $input "Q[";
        print $input join(",",$R->variables);
        print $input "]{\n";
        print $input $p;
        print $input "\n}";
        print $tempfile;
        close $input;

        # Accessing gfan:
        system "$gfan_tropicalbruteforce --xml <$tempfile.in >$tempfile.poly 2>/dev/null";

        my $gfan_out= User::load("$tempfile.poly");
        return $gfan_out;
}

