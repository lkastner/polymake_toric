#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

IMPORT
   ideal
   graph

#######################################
#######################################
###
### Toric Variety
###
#######################################
#######################################

declare object ToricVariety : PolyhedralFan<Rational>; 

#object PolyhedralFan<Rational> {
#
#	auto_cast : ToricVariety<Rational>;
#
#}

#######################################
#######################################
###
### Subvariety in Toric Variety
###
#######################################
#######################################

declare object SubvarietyInTV;

INCLUDE
   toric_divisor_properties.rules
   toric_variety_properties.rules
	gfan_hyp_brut.rules
	cocoref_topcom.rules
   subvarietyInTV_properties.rules
	toric_variety.rules
	toric_divisor.rules
   subvarietyInTV.rules
	standard_constructions.rules
   toric_divisor_classes.rules
   cyclic_quotient.rules
   deformations.rules
   cq_deformations.rules

user_function add_ray(PolyhedralFan, Vector){
	my($fan, $ray) = @_;
	my $oldrays = $fan->RAYS;
	my $newrays = $oldrays / $ray;
	print $newrays;
	my $mc = $fan->MAXIMAL_CONES;
	for my $f (@$mc) {
		print "$f\n";
		my $gens = new Matrix<Rational>(@$oldrays[@$f]);
		print $gens;
	}
}


# Checking if a fan is complete by checking if every facet appears with an even factor.
user_function is_complete(PolyhedralFan<Rational>){
	my $f = shift;
	if ( $f->AMBIENT_DIM != $f->DIM ) { return 0; }
	my $check = (1 == 1);
	my $mc = $f->MAXIMAL_CONES;
	my $fanrays = new Matrix<Rational>($f->RAYS);
	my @init_cones = map((new Matrix<Rational>(@$fanrays[@$_])), @$mc);
	@init_cones = map((new Cone<Rational>(INPUT_RAYS=>$_)), @init_cones);
	my @collection = ();
	foreach my $c (@init_cones){
		my $rays = $c->RAYS;
                my $frc = $c->RAYS_IN_FACETS;
		my @facet_cones = map((new Matrix<Rational>(@$rays[@$_])), @$frc);
		@facet_cones = map((new Cone<Rational>(INPUT_RAYS=>$_)), @facet_cones);
		@collection = (@collection, @facet_cones);
	}
	foreach my $facet (@collection){
		my $ref = grep(equal_polyhedra($facet, $_), @collection);
		$check = $check && ($ref == 2);
		$check or last;
	}
	return $check;
}

user_function tropical_milnor(Polynomial){
   my($p) = @_;
   my $f = gfan_tropicalhypersurface($p);
   print "Rays:\n".$f->RAYS;
   my $c = new Cone(INPUT_RAYS=>unit_matrix($f->AMBIENT_DIM));
   my @nc = map((intersection(new Cone(INPUT_RAYS=>$f->RAYS->minor($_,All)), $c)),@{$f->MAXIMAL_CONES});
   my $intersection = check_fan_objects(@nc);
   my $nr = new Matrix(map(primitive($_),@{$intersection->RAYS}));
   print "New rays:\n".$nr."\n";
   my $counter = 0; 
}

# Checking if two fans are the same
user_function equal_fans(PolyhedralFan<Rational>, PolyhedralFan<Rational>){
	my ($f, $g) = @_;
	if ( $f->LINEALITY_DIM > 0 || $g->LINEALITY_DIM > 0 ) { die "this test does only work for pointed fans"; }
	if ($f->RAYS->rows != $g->RAYS->rows)
		{return (0 == 1);}
	if ($f->N_MAXIMAL_CONES != $g->N_MAXIMAL_CONES)
		{return (0 == 1);}

	my $map = new Map<Vector<Rational>,Int>;
	my $i = 0;
	foreach my $r (@{$f->RAYS}){
		$map->{$r} = $i;
		$i++;
	}
	foreach my $r (@{$g->RAYS}){
		if (!exists($map->{$r}))
		{#print "la\n";
		return (0 == 1);}
	}
	my $mf = $f->MAXIMAL_CONES;
	my @mcf = @$mf;
	my $mg = $g->MAXIMAL_CONES;
	my @mcg =@$mg;
	foreach my $c (@mcg){
		my $equals = grep( (new Set<Int>(map{$map->{$g->RAYS->[$_]}} @$c)) == $_, @mcf); 
		if ($equals == 0) 
			{return (0==1);}
	}	
	
	return (0==0);
}

