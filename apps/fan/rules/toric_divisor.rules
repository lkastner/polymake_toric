declare object TDivisor;

object TDivisor {

	property COEFFICIENTS : Vector<Rational>;

	property PRINCIPAL : Bool;
	
	property CARTIER : Bool;
	
	property Q_CARTIER : Bool;

	property BASEPOINT_FREE : Bool;
	
	property AMPLE : Bool;
	
	property SEMIAMPLE : Bool;
	
	property INTEGRAL : Bool;

	property SECTION_POLYTOPE : Polytope<Rational>;

	property CARTIER_DATA : Map<Set<Int>,Vector>;


	rule INTEGRAL : COEFFICIENTS {		
		$this->INTEGRAL = (eliminate_denominators($this->COEFFICIENTS) - $this->COEFFICIENTS == zero_vector($this->COEFFICIENTS->dim));
	}
	
	rule CARTIER :  {
		$this->CARTIER = 1;
	}
	precondition : PRINCIPAL;




}


object ToricVariety {

	property DIVISOR : TDivisor : multiple;

	
	rule DIVISOR.PRINCIPAL : RAYS, DIVISOR.COEFFICIENTS {
		my $c = $this->DIVISOR->COEFFICIENTS;
		my $eq = -$c | $this->RAYS;
		my $bla = new Polytope<Rational>(EQUATIONS => $eq);
		$bla->VERTICES;
		my $sol = grep($_->[0]==1, @{$bla->LATTICE_POINTS});
		$this->DIVISOR->PRINCIPAL=($sol > 0);
	}

	rule DIVISOR.SECTION_POLYTOPE : RAYS, DIVISOR.COEFFICIENTS {
		my $a = $this->DIVISOR->COEFFICIENTS;
		my $v = $this->RAYS;		
		my $ineq = $a | $v;
		$this->DIVISOR->SECTION_POLYTOPE = new Polytope<Rational>(INEQUALITIES => $ineq);
	}

	rule DIVISOR.CARTIER, DIVISOR.CARTIER_DATA : RAYS, DIVISOR.COEFFICIENTS, MAXIMAL_CONES {
		my $maxcones = $this->MAXIMAL_CONES;
		my $map = new Map<Set<Int>,Vector>;
		my $rays = $this->RAYS;
		my $a = $this->DIVISOR->COEFFICIENTS;
		foreach my $s (@$maxcones){
			my $eq = $a->slice($s) | $rays->minor($s,All);
			my $bla = new Polytope<Rational>(EQUATIONS => $eq);
			$bla->VERTICES;
			if ($bla->N_LATTICE_POINTS == 0){
				$this->DIVISOR->CARTIER = 0;
				return;			
			}
			$map->{$s} = $bla->LATTICE_POINTS->row(0);
		}
		$this->DIVISOR->CARTIER = 1;
		$this->DIVISOR->CARTIER_DATA = $map;
	}

	rule DIVISOR.BASEPOINT_FREE : DIVISOR.CARTIER_DATA, MAXIMAL_CONES, DIVISOR.SECTION_POLYTOPE {
		my $maxcones = $this->MAXIMAL_CONES;
		my $P = $this->DIVISOR->SECTION_POLYTOPE;
		my $map = $this->DIVISOR->CARTIER_DATA
		foreach my $s (@$maxcones){
			$this->DIVISOR->NEF &= $P->contains($map->{$s});
		}
	
	}
	precondition : DIVISOR.CARTIER;
	precondition : PURE;
	precondition : DIM == AMBIENT_DIM;

}
