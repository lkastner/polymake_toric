#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

object ToricVariety {

   method construct(PolyhedralFan<Rational>) {
      my $fan = $_[1];
      my $result = new ToricVariety();
      $fan->copy_contents($result);
      return $result;
   }
   
   rule AFFINE : N_MAXIMAL_CONES{
      $this->AFFINE = ($this->N_MAXIMAL_CONES == 1);
   }
   
	rule DEGENERATE : LINEALITY_DIM {
  		$this->DEGENERATE(temporary) = $this->LINEALITY_DIM > 0; 
	}
	weight 0.10;
	
	rule FANO : N_MAXIMAL_TORUS_ORBITS {
		my $f = new PolyhedralFan($this);
    	my $t = new ToricVariety($f);
    	my $AK = $t->add("DIVISOR", COEFFICIENTS=>ones_vector($this->N_MAXIMAL_TORUS_ORBITS));
    	$this->FANO = $AK->AMPLE;
	}
	
	# the number of maximal torus orbits 
	# the correspond to the rays of the fan
	rule N_MAXIMAL_TORUS_ORBITS : N_RAYS {
  		$this->N_MAXIMAL_TORUS_ORBITS = $this->N_RAYS;
	}
	weight 0.10;
	
	rule ORBIFOLD : SIMPLICIAL {
  		$this->ORBIFOLD(temporary) = $this->SIMPLICIAL; 
	}
	weight 0.10;

	rule PROJECTIVE : RAYS, MAXIMAL_CONES {
	  $this->PROJECTIVE = polytopal($this);
	}

   rule PROJECTIVE, GENERATING_POLYTOPE : MAXIMAL_CONES, RAYS {
      my $t = time();
      my $rays = new Matrix<Rational>($this->RAYS);
      $rays = new Matrix<Integer>(map(primitive($_),@$rays));
      my $gale_inhom = transpose(null_space(transpose($rays)));
      my $gale = ones_vector() | new Matrix<Rational>($gale_inhom);
      #print transpose($this->RAYS)*$gale_inhom;
      my @gale_duals = ();
      print "preparation: ",time()-$t,"s\n";# if ($DebugLevel);
      $t = time();
      foreach my $c (@{$this->MAXIMAL_CONES}){
         my $p = new Polytope<Rational>(POINTS=>$gale->minor(~$c, All));
         push @gale_duals, $p;
      }
      print "gale_duals: ",time()-$t,"s\n";# if ($DebugLevel);
      $t = time();
      my $check = intersection(@gale_duals);
      print "intersection: ",time()-$t,"s\n";# if ($DebugLevel);
      $t = time();
      return $this->PROJECTIVE = 0 if (!$check->FEASIBLE);
      foreach my $p (@gale_duals) {
         if ($p->FACETS * transpose($check->VERTICES) == new Matrix($p->N_FACETS,$check->N_VERTICES)) {
            $this->PROJECTIVE = 0;
            return;
         }
      }
      print "facet_interior_check: ",time()-$t,"s\n";# if ($DebugLevel);
      $t = time();
      $rays = new Matrix<Rational>($rays);
      my @gc = (0);
      my $m = $rays->cols;
      my $i = 1;
      while(rank($rays->minor([@gc], All)) < $m){
         if(rank($rays->minor([@gc], All)) < rank($rays->minor([@gc], All) / $rays->[$i])){
            push @gc, $i;
         }
         $i++;
      }
      # print @gc,"\n";
      my $section = inv($rays->minor([@gc],All));
      my $s = new Matrix<Rational>($rays->cols, $rays->rows);
      # print $s;
      $s->minor(All, [@gc]) = $section;
      # print $s;
      $section = $s;
      #$section = $section | new Matrix($section->rows, $rays->cols - $section->rows);
      #print $section;
      # print $section * transpose(new Matrix<Rational>($rays));
      print "Bounded?", $check->BOUNDED, "\n";
      my $c = $check->REL_INT_POINT;
      # print $c;
      # print $gale_inhom;
      my $eq = (-$c->slice(1) | transpose(new Matrix<Rational>($gale_inhom)));
      # print $eq;
      my $ineq = (zero_vector() | dense(unit_matrix($gale_inhom->rows)));
      # print $ineq;
      my $p = new Polytope<Rational>(EQUATIONS=>$eq, INEQUALITIES=>new Matrix<Rational>($ineq));
      my $pv = $p->VERTICES;
      # print "Using the following section:\n";
      # print $section;
      # print "Checking:\n";
      # print $section * $rays;
      $section = (zero_vector() | $section);
      my $new_vert = $section * transpose($pv);
      #print $new_vert;
      $this->GENERATING_POLYTOPE = new Polytope<Rational>(POINTS=>(ones_vector() | transpose($new_vert)));
      $this->PROJECTIVE = 1;
   }

  # dualize a cone
  rule MORI_CONE.RAYS, MORI_CONE.LINEALITY_SPACE : NEF_CONE.FACETS, NEF_CONE.LINEAR_SPAN {
    $this->MORI_CONE->RAYS = $this->NEF_CONE->FACETS;
    $this->MORI_CONE->LINEALITY_SPACE =  $this->NEF_CONE->LINEAR_SPAN;
  }
  precondition : COMPLETE; 

}

