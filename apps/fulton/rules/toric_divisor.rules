#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

object NormalToricVariety {

	rule DIVISOR.BASEPOINT_FREE : DIVISOR.CARTIER_DATA, MAXIMAL_CONES, DIVISOR.SECTION_POLYTOPE {
		my $maxcones = $this->MAXIMAL_CONES;
		my $P = $this->DIVISOR->SECTION_POLYTOPE;
		my $map = $this->DIVISOR->CARTIER_DATA;
		foreach my $s (@$maxcones){
			if (!$P->contains($map->{$s})){
				$this->DIVISOR->BASEPOINT_FREE = 0;
				return;
			}
			
		}
		$this->DIVISOR->BASEPOINT_FREE = 1;
	}
	precondition : DIVISOR.CARTIER;
	precondition : PURE;
	precondition : FULL_DIM;


  # ampleness implies that  the divisor is Cartier and the fan is complete
  # Hence, [[CARTIER_DATA]] is defined and contains integral points
  # for any two adjacent maximal cones s,s' with intersection t we have to check the following:
  # if m, m' are the vertices corresponding to the cones, and u is a generator of s'/t, then (m-m')*u must be positive
  # (note that any vector u pointing in the right direction in s'/t suffices to check this)
  rule DIVISOR.AMPLE : DIVISOR.COEFFICIENTS, DIVISOR.CARTIER_DATA, RAYS, MAXIMAL_CONES, DUAL_GRAPH.ADJACENCY {
    my $mc = $this->MAXIMAL_CONES;
    my $rays = primitive($this->RAYS);
    my $d =$this->DIVISOR->COEFFICIENTS;
    my $cd = $this->DIVISOR->CARTIER_DATA;
    my $dg = $this->DUAL_GRAPH->ADJACENCY;
 	
    foreach my $i (0..$mc->rows-1) {
      foreach my $adj (@{$dg->adjacent_nodes($i)})  {
	if ( $adj > $i ) {
	  my $j = @{($mc->[$adj]-$mc->[$i])}[0];
	  if ( ($cd->{$mc->[$i]}-$cd->{$mc->[$adj]})->slice(1)*($rays->[$j]) <= 0 ) {
	      $this->DIVISOR->AMPLE = 0;
	      return;
	  }
	}
      }
    }
    $this->DIVISOR->AMPLE = 1;
  }
  weight 3.10;
#  precondition : DIVISOR.CARTIER;
  precondition : COMPLETE;


  # computes whether a toric divisor is [[NEF]]
  # algorithm: check whether the divisor is in the nef cone of the variety
  rule DIVISOR.NEF : DIVISOR.COEFFICIENTS, NEF_CONE.FACETS, NEF_CONE.LINEAR_SPAN, RATIONAL_DIVISOR_CLASS_GROUP.PROJECTION {
    my $f = $this->NEF_CONE->FACETS;
    my $l = $this->NEF_CONE->LINEAR_SPAN;
    my $pd = $this->DIVISOR->COEFFICIENTS * $this->RATIONAL_DIVISOR_CLASS_GROUP->PROJECTION;
    my $v = $f*$pd;
    
    foreach (@{$v}) { if ( $_ < 0 ) { $this->DIVISOR->NEF = 0; return; } }
    if ( $l->rows ) { 
      my $w = $l*$pd;
      foreach (@{$w}) { if ( $_ != 0 ) { $this->DIVISOR->NEF = 0; return; } }
    }
    $this->DIVISOR->NEF = 1;
  }
  weight 1.10;
	
	
	# computes whether a toric divisor is [[EFFECTIVE]]
  	# algorithm: check whether the divisor is in the effective cone of the variety    
  	rule DIVISOR.EFFECTIVE : DIVISOR.COEFFICIENTS, EFFECTIVE_CONE.FACETS, EFFECTIVE_CONE.LINEAR_SPAN, RATIONAL_DIVISOR_CLASS_GROUP.PROJECTION {
    	my $f = $this->EFFECTIVE_CONE->FACETS;
    	my $l = $this->EFFECTIVE_CONE->LINEAR_SPAN;
    	my $pd = $this->DIVISOR->COEFFICIENTS * $this->RATIONAL_DIVISOR_CLASS_GROUP->PROJECTION;
    	my $v = $f*$pd;
    
    foreach (@{$v}) { if ( $_ < 0 ) { $this->DIVISOR->EFFECTIVE = 0; return; } }
    if ( $l->rows ) { 
      my $w = $l*$pd;
      foreach (@{$w}) { if ( $_ != 0 ) { $this->DIVISOR->EFFECTIVE = 0; return; } }
    }
    $this->DIVISOR->EFFECTIVE = 1;
  }
    weight 1.10;
    
 

}


# ---------------------
# user functions
# ---------------------


# @category Normal Toric Varieties
# return the polytope defined by an element of the nef or effective cone
# first argument is the fan, second the Vector defining the divisor class
user_function polytope_of_divisor_class {
  my ($f,$d)=@_;

  my $m = primitive($f->RAYS);
  my $ld = $d*$f->RATIONAL_DIVISOR_CLASS_GROUP->LIFTING;
  my $q=new polytope::Polytope<Rational>(INEQUALITIES=>$ld|$m);
  return $q;
}


	
	

