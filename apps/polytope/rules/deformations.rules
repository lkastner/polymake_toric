object Cone<Rational>{
   
   property INTERESTING_DEGREES : Matrix;

}

declare object Deformation;

object Deformation{
   
   property TAUTOLOGICAL_MAP : Matrix;

   property SIGMA : Cone;

   property DEGREE : Vector;

   property Q0 : Polytope;

   property Q1 : Polytope;

   property QR : Polytope;

   property TAUTOLOGICAL_CONE : Cone;

   user_method preimage_degrees(Vector){
      my($this, $v) = @_;
      my $eq = -$v | transpose($this->TAUTOLOGICAL_MAP);
      my $hyp = new Polytope(EQUATIONS=>$eq);
      my $rays = zero_vector | $this->TAUTOLOGICAL_CONE->RAYS;
      # print $rays;
      $rays = (ones_vector(1) | zero_vector($rays->cols -1))/$rays;
      # print $rays;
      my $lifted_cone = new Cone(INPUT_RAYS=>$rays);
      return intersection($lifted_cone, $hyp);
   }
#rule TAUTOLOGICAL_CONE : DECOMPOSITION, SIGMA{
      #todo
#   }

#   rule SIGMA : DECOMPOSITION{
      #trivial todo
#   }

   rule SIGMA : QR{
      #...
   }

   rule QR : Q0, Q1 {
      $this->QR = minkowski_sum($this->Q0, $this->Q1);
   }

   rule TAUTOLOGICAL_CONE : Q0, Q1 {
      my $p = $this->Q0->VERTICES;
      my $q = $this->Q1->VERTICES;
      # Select the real vertices, i.e. with one as first entry:
      my $vp = new Matrix(grep($_->[0]==1,@$p));
      my $vq = new Matrix(grep($_->[0]==1,@$q));
      # Select rays, i.e. with zero as first entry:
      # Note: Maybe one should check the tailcones here.
      #  I will just add both for now.
      my $rp = new Matrix(grep($_->[0]==0,@$p));
      my $rq = new Matrix(grep($_->[0]==0,@$q));
      # Cut off leading entries:
      $vp = $vp->minor(All, ~[0]);
      $vq = $vq->minor(All, ~[0]);
      $vp = ($vp | ones_vector | zero_vector);
      $vq = ($vq | zero_vector | ones_vector);
      my $rays = $vp / $vq;
      if(($rp->rows > 0) && ($rq->rows > 0)){
         $rp = $rp->minor(All, ~[0]);
         $rq = $rq->minor(All, ~[0]);
         $rp = ($rp | zero_vector | zero_vector);
         $rq = ($rq | zero_vector | zero_vector);
         $rays = $rays / $rp;
         $rays = $rays / $rq;
      }
      $this->TAUTOLOGICAL_CONE = new Cone(INPUT_RAYS=>$rays);
   }

   rule QR : SIGMA, DEGREE{
      my $rays = $this->SIGMA->RAYS;
      my $R = $this->DEGREE;
      # This evaluates $R on each $ray:
      my @v = map($_*$R, @$rays);
      # We write the height in front of each vertex:
      my $vert = (new Vector(@v)|$rays);
      # print $vert;
      # The new Polytope:
      $this->QR = new Polytope<Rational>(POINTS=>$vert);
   }

   rule TAUTOLOGICAL_MAP : QR {
      my $p = $this->QR->VERTICES;
      my @vertices = grep($_->[0] == 1, @$p);
      my @rays = grep($_->[0] == 0, @$p);
      @vertices = map{
         my $v = $_;
         my @res = ();
         push @res, $v;
         (@res, map($v+$_, @rays));
      }@vertices;
      # print new Matrix(@vertices);
      # I hope, this one has full dimension.
      my $v = new Polytope(POINTS=>new Matrix(@vertices));
      $v = $v->VERTICES->minor(All, ~[0]);
      # print $v;
      my $dim = $v->cols;
      my $m = $v->rows;
      # The following will select a full rank subset of $v:
      my @init_cones = all_subsets_of_k($dim, 0..($m)-1);
      @init_cones = map(new Set($_), @init_cones);
      @init_cones = map((new Matrix<Rational>(@$v[@$_])), @init_cones);
      @init_cones = grep(rank($_) == $dim, @init_cones);
      my $good_vert = pop @init_cones;
      # print $good_vert;
      my $taut = $good_vert|ones_vector|ones_vector;
      $this->TAUTOLOGICAL_MAP = transpose($taut)*inv(transpose($good_vert));
   }

}

object Polytope<Rational>{
   
   property DEFORMATION_MINKOWSKI_CONE : Cone;

}

user_function find_possible_decompositions(Polytope<Rational>){
   my($P) = @_;
   # TODO: Mess with non-lattice polytopes.
   my $mink_cone = $P->MINKOWSKI_SUMMAND_CONE;
   my $pos_orth = cube($mink_cone->AMBIENT_DIM);
   my $vert = zero_vector() | new Matrix($mink_cone->RAYS);
   $vert = (ones_vector(1)|zero_vector($mink_cone->AMBIENT_DIM))/$vert;
   my $ineq = new Matrix(ones_vector($vert->cols));
   $ineq->col(0) *= -1;
   print $ineq;
   my $q = new Polytope(POINTS=>$vert);
   # We only want points with positive entries.
   $q = intersection($q, $pos_orth);
   # This will select those points, that aren't zero.
   $q = intersection($q, new Polytope(INEQUALITIES=>$ineq));
   my $good_summands = $q->LATTICE_POINTS->minor(All, ~[0]);
   print $good_summands;
   my $eq = -ones_vector($good_summands->cols) | (new Matrix(transpose($good_summands)));
   $ineq = zero_vector($good_summands->rows) | dense(unit_matrix($good_summands->rows));
   print $eq;
   print $ineq;
   $q = new Polytope(EQUATIONS=>$eq, INEQUALITIES=>$ineq);
   my $sol = $q->LATTICE_POINTS->minor(All, ~[0]);
   print $sol;
   # Just checking whether the combinations sum up to our polytope.
   print transpose($good_summands)*transpose($sol);
}
