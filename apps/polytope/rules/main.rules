#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

INCLUDE
   toric_ideal.rules
   deformations.rules

object Polytope<Rational> {

   # A Minkowski summand of the polytope having the same normal fan, but being a hopefully
   # small lattice polytope.
	property NICE_MINKOWSKI_SUMMAND : Polytope;

   # The cone of unbounded directions.
	property TAILCONE : Polytope;

	rule NICE_MINKOWSKI_SUMMAND : MINKOWSKI_CONE, GRAPH {
		my $minkp = new Matrix<Rational>($this->MINKOWSKI_CONE->EQUATIONS);
		my $eqs = new Matrix<Rational>($this->GRAPH->EDGE_DIRECTIONS);
		my $count = 0;
		my @factors = ();
		foreach my $e (@$eqs){
			my $factor = new Rational(1);
   			my $test = primitive(eliminate_denominators($e));
				for(my $i = 0; $i < $e->dim; $i++){
					if($e->[$i] != 0){
						$factor = (new Rational($test->[$i]))/(new Rational($e->[$i]));
						last;
					}
				}
			#print $e, " ", $test, " factor: ", $factor, "\n";
			$minkp->col($count) *= $factor;
			push @factors, $factor;
			$count++;
		}
		$eqs = primitive(eliminate_denominators($eqs));
		my $eq = new Matrix<Rational>(zero_vector($minkp->rows) | $minkp);
		my $ineq = new Matrix<Rational>(-ones_vector($minkp->cols) | dense(unit_matrix($minkp->cols)));
		#print $eq,"\n";
		#print $ineq,"\n";
		my $newMink = new Polytope<Rational>(EQUATIONS=>$eq, INEQUALITIES=>$ineq);
		my $newMinkVertices = $newMink->VERTICES;
		my $q;
		foreach my $v (@$newMinkVertices){
			if ($v->[0]==1){
				$q = new Vector<Rational>($v->slice(1));
				last;
			}
		}
		$q = primitive(eliminate_denominators($q));
		$q = new Vector<Rational>($q);
		#print $q,"\n";
		my $i = 0;
		foreach my $f (@factors){
			$q->[$i] *= $f;
			$i++;
		}
		$this->NICE_MINKOWSKI_SUMMAND = $this->MINKOWSKI_CONE_POINT($q);
	
	}

	rule TAILCONE : FACETS, AFFINE_HULL {
		my $ineq = $this->FACETS;
		my $eq = $this->AFFINE_HULL;
		# print $ineq;
		my $newineq = (new Vector<Rational>($ineq->rows)) | $ineq->minor(All,~[0]);
		$this->TAILCONE = new Polytope<Rational>(INEQUALITIES=>$newineq);	
	}

}

