#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

CREDIT 4ti2

# path to groebner
# custom $groebner;
# Note: This is already declared in the _4ti2 file from Polymake.

CONFIGURE {
    find_program($groebner, "groebner", { prompt => "the program `groebner' from the 4ti2 package" }) or return;
}

object Cone<Rational>{

   property TORIC_IDEAL : Matrix<Integer>;

   rule _4ti2.toric_ideal : TORIC_IDEAL : HILBERT_BASIS {
      my $H = $this->HILBERT_BASIS;
      
      # Creating temporary file for input.
      my $temp = new Tempfile;
      open(my $input, ">$temp.mat")
         or die "Kill all humans.";

      # Printing Hilbert basis to file.
      print $input $H->cols, " ", $H->rows, "\n";
      print $input new Matrix<Integer>(transpose($H));
      close $input;

      # Running 4ti2.
      open(my $P, "$groebner $temp 2>&1 |")
         or die "couldn't run 4ti2's 'groebner': $!";
      local $_;
      while(<$P>) {
         print $_;
      }
      close $P;

      # Parsing output.
      open(my $output, "<$temp.gro")
         or die "Humans not found.";
      local $_;
      my @ti = ();
      while(<$output>) {   
         if(/^$/) {
            next;
         }
         # print "line: ".$_;
         my @p = split;
         push @ti, \@p;
      }
      my $size = @ti;
      @ti = @ti[1..($size-1)];

      close $output;
      $this->TORIC_IDEAL = new Matrix<Integer>(@ti);
   }

}

