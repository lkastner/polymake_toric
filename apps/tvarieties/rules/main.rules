
IMPORT common

IMPORT polytope

file_suffix tv

# Might need some other name.
declare object Variety {
	
	property BASERING : Ring;

	#property COEFFICIENTS : Polynomial : multiple; # This one doesn't even work with multiple.

	property IS_PROJECTIVE : Bool;

}

declare object PrimeDivisor {
	
	property NAME : String;

}

declare object Divisor {
	
	property IS_SEMI_AMPLE : Bool;

	property IS_BIG : Bool;

	property IS_AMPLE : Bool;

	property SUMMANDS : PrimeDivisor : multiple;

	property N_SUMMANDS : Integer;

	property COEFFICIENTS : Vector<Rational>;	
	
	rule N_SUMMANDS : SUMMANDS {
		$this->N_SUMMANDS = scalar(@{$this->SUMMANDS});
	}
}

declare object PolyhedralPrimeDivisor : PrimeDivisor {

	property COEFFICIENT : polytope::Polytope;

}

declare object PolyhedralDivisor ;

declare object PDivisor : PolyhedralDivisor {
	
	# Do we need this one at all?	
	
}

object PolyhedralDivisor {

	property SUMMANDS : PolyhedralPrimeDivisor : multiple;

	property N_SUMMANDS : Integer;
	
	property IS_P_DIVISOR : Bool;

	property IS_SEMI_AMPLE : Bool;

	property IS_BIG_RELINT : Bool;
	
	property TAIL_CONE : Polytope;

	auto_cast : PDivisor;
	precondition : IS_P_DIVISOR;
	
	rule N_SUMMANDS : SUMMANDS {
		$this->N_SUMMANDS = scalar(@{$this->SUMMANDS});
	}

	rule IS_P_DIVISOR : IS_SEMI_AMPLE, IS_BIG_RELINT {
		$this->IS_P_DIVISOR = $this->IS_SEMI_AMPLE && $this->IS_BIG_RELINT;
	}

	user_method EVALUATE {
		my($PD, $c) = @_;
		my (@summands, @coeffs);
		my $result = new Divisor();
		foreach my $s (@{$PD->SUMMANDS}){
			$s->COEFFICIENT->LP = new LinearProgram<Rational>(LINEAR_OBJECTIVE=>$c);
			my $mv = $s->COEFFICIENT->LP->MINIMAL_VALUE;
			print $mv;
			push @coeffs, $mv;
			$result->add("SUMMANDS", new PrimeDivisor($s));
		}
		$result->COEFFICIENTS = new Vector<Rational>(@coeffs);
		return $result;
	}
}


declare object AffineTVariety {
	
	property P_DIVISOR : PDivisor;

	#property GENERATORS : Array<Polynomial>;

	#rule GENERATORS : P_DIVISOR {
		#TODO
	#}

}
